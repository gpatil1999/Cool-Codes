int runCustomerSimulation(int avail, string s){
    set<char> occupied, waiting;
    int count=0;				//My approach
    for(int i=0;i<s.length();i++){
        if(occupied.find(s[i])!=occupied.end()){
            occupied.erase(s[i]);
            avail++;
        }
        else if(waiting.find(s[i])!=waiting.end()){
            waiting.erase(s[i]);
            count++;
        }
        else{
            if(avail>0){
                occupied.insert(s[i]);
                avail--;
            }
            else{
                waiting.insert(s[i]);
            }
        }
    }
    return count;
}
//More optimal approach â€“ uses arrays instead of maps hence saves searching time
int runCustomerSimulation(int n, const char *seq) 
{ 
    // seen[i] = 0, indicates that customer 'i' is not in cafe 
    // seen[1] = 1, indicates that customer 'i' is in cafe but 
    //              computer is not assigned yet. 
    // seen[2] = 2, indicates that customer 'i' is in cafe and 
    //              has occupied a computer. 
    char seen[MAX_CHAR] = {0}; 
  
    // Initialize result which is number of customers who could 
    // not get any computer. 
    int res = 0; 
  
    int occupied = 0;  // To keep track of occupied computers 
  
    // Traverse the input sequence 
    for (int i=0; seq[i]; i++) 
    { 
        // Find index of current character in seen[0...25] 
        int ind = seq[i] - 'A'; 
  
        // If First occurrence of 'seq[i]' 
        if (seen[ind] == 0) 
        { 
            // set the current character as seen 
            seen[ind] = 1; 
  
            // If number of occupied computers is less than 
            // n, then assign a computer to new customer 
            if (occupied < n) 
            { 
                occupied++; 
  
                // Set the current character as occupying a computer 
                seen[ind] = 2; 
            } 
  
            // Else this customer cannot get a computer, 
            // increment result 
            else
                res++; 
        } 
  
        // If this is second occurrence of 'seq[i]' 
        else
        { 
           // Decrement occupied only if this customer 
           // was using a computer 
           if (seen[ind] == 2) 
               occupied--; 
           seen[ind] = 0; 
        } 
    } 
    return res; 
} 
