//Method 1: For each node value a in BST 1, search the value (x â€“ a) in BST 2. If value found then increment the count. For searching a value in BST, refer this post. 
//Time complexity: O(n1 * h2), here n1 is number of nodes in first BST and h2 is height of second BST.
//Can use set to store tree1 and traverse tree2 to find X-tree2node data.

//Method 2:

int countPairs(Node* root1, Node* root2, int x)
{
    int count = 0;
    stack<Node*> s1,s2;
    s1.push(root1);
    s2.push(root2);
    
    while(!s1.empty() && !s2.empty()){
        
        while(root1){
           s1.push(root1);
           root1 = root1->left;
        }
        while(root2){
            s2.push(root2);
            root2 = root2->right;
        }
        
        Node *top1 = s1.top();
        Node *top2 = s2.top();
        
        if(top1->data+top2->data==x){
            count++;
            s1.pop(); s2.pop();
            root1 = top1->right;
            root2 = top2->left;
        }
        else if(top1->data+top2->data < x){
            s1.pop();
            root1 = top1->right;
        }
        else{
            s2.pop();
            root2 = top2->left;
        }
    }
    return count;
}

