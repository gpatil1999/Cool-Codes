// my approach T o(n) S o(n):
int main() {
	string str = " (((a+b))+c) ";
	vector<int> v1,v2;
	
	for(int i=0; i<str.size(); i++){
	    if(str[i]=='(')
	        v1.push_back(i);
	    else if(str[i]==')')
	        v2.push_back(i);
	    else continue;     
	}
	for(int i=1; i<v1.size(); i++){
	    if(v1[i]-v1[i-1]==v2[i]-v2[i-1])
	        {cout<< "true"; return 0;}
	}
	cout<<"false";
	return 0;
}

//stack approach T o (n) S o (n) :
bool checkRedundancy(string& str) 
{ 
    // create a stack of characters 
    stack<char> st; 
  
    // Iterate through the given expression 
    for (auto& ch : str) { 
  
        // if current character is close parenthesis ')' 
        if (ch == ')') { 
            char top = st.top(); 
            st.pop(); 
  
            // If immediate pop have open parenthesis '(' 
            // duplicate brackets found 
            bool flag = true; 
  
            while (top != '(') { 
  
                // Check for operators in expression 
                if (top == '+' || top == '-' ||  
                    top == '*' || top == '/') 
                    flag = false; 
  
                // Fetch top element of stack 
                top = st.top(); 
                st.pop(); 
            } 
  
            // If operators not found 
            if (flag == true) 
                return true; 
        } 
  
        else
            st.push(ch); // push open parenthesis '(', 
                  // operators and operands to stack 
    } 
    return false; 
} 

//most efficient approach 
T o(n), S o(1)
bool IsRedundantBraces(string A) 
{ 
    // count of no of signs 
    int a = 0, b = 0; 
    for (int i = 0; i < A.size(); i++) { 
        if (A[i] == '('
            && A[i + 2] == ')') 
            return 1; 
        if (A[i] == '*'
            || A[i] == '+'
            || A[i] == '-'
            || A[i] == '/') 
            a++; 
        if (A[i] == '(') 
            b++; 
    } 
    if (b > a) 
        return 1; 
    return 0; 
} 
