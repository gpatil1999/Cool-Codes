class LRUCache {
     list<int> dl;
     unordered_map<int,int> m;
     int cap;
public:
    LRUCache(int capacity) {
         cap = capacity;
    }
    
    int get(int key) {
        if(m.find(key)!=m.end()){
            dl.remove(key);
            dl.push_back(key);
            return m[key];
        }
        return -1;
    }
    
    void put(int key, int value) {
        if(m.find(key)!=m.end()){
            dl.remove(key);    
            dl.push_back(key);
            m[key]=value;
        }
        else{
            if(dl.size()==cap){
                m.erase(dl.front());
                dl.pop_front();
            }    
            dl.push_back(key);
            m[key]=value;
        }
        return;
    }    
};
