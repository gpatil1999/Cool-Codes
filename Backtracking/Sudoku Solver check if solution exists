bool isSafe(int grid[][N],int row, int col, int num){
    for(int i=0;i<N; i++) 
        if(grid[i][col]==num && i!=row)
            return false;
    for(int i=0;i<N; i++) 
        if(grid[row][i]==num && i!=col)
            return false;
    int mini_i = (row/3)*3, mini_j = (col/3)*3;
    for(int i=mini_i; i<mini_i+3; i++){
        for(int j=mini_j; j<mini_j+3; j++)
            if(grid[i][j]==num && i!=row && j!=col)
                return false;
    }
    return true;
}

bool helper(int grid[][N], int row, int col){
    if(col==N){
        row++;
        col=0;
    }
    if(row==N)
        return true;                                                 // can use this case to print the solved sudoku
    
    if(grid[row][col]!=0)
        return (helper(grid,row,col+1));
            
    for(int i=1; i<=9; i++){
        if(isSafe(grid,row,col,i)){
            grid[row][col]=i;
            if(helper(grid,row,col+1))
                return true;
            grid[row][col]=0;    
        }
    }    
    return false;
}

bool SolveSudoku(int grid[N][N])  
{ 
    return helper(grid,0,0);
}
